""" Streamlit app: Illiquid Option / Algo Wash Trade Simulation Save this file as streamlit_algo_simulation.py and run with: pip install streamlit pandas matplotlib streamlit run streamlit_algo_simulation.py

This app simulates an algorithm acting as both buyer and seller in an illiquid option market. It demonstrates wash trades that push price up and a human who chases the price and ends up with a loss versus a specified fair price.

Author: Generated by ChatGPT for user """ import streamlit as st import pandas as pd import matplotlib.pyplot as plt from io import StringIO

st.set_page_config(page_title="Algo Wash Trade Simulator", layout="wide") st.title("ðŸ§ª Algo Wash Trade â€” Illiquid Option Simulation")

Sidebar controls

st.sidebar.header("Simulation parameters") fair_price = st.sidebar.number_input("Fair price (reference)", value=40.0, step=1.0) algo_bid_initial = st.sidebar.number_input("Algo displayed bid (initial)", value=20.0, step=1.0) algo_ask_initial = st.sidebar.number_input("Algo displayed ask (initial)", value=100.0, step=1.0)

st.sidebar.markdown("---") human_limit_price = st.sidebar.number_input("Human visible limit buy (initial)", value=21.0, step=1.0) chase_pct = st.sidebar.slider("Human chases at % above fair price", min_value=5, max_value=100, value=20, step=1)

st.sidebar.markdown("---")

Ladder: allow simple CSV / comma list input or default ladder

ladder_text = st.sidebar.text_input("Algo wash trade ladder (comma separated prices)", value="22,26,30,34,38,42")

st.sidebar.markdown("---") show_orderbook = st.sidebar.checkbox("Show orderbook snapshots", value=True) show_trade_log = st.sidebar.checkbox("Show trade log", value=True)

run_sim = st.sidebar.button("Run simulation")

st.markdown("This app simulates the sequence you described: the algo posts wash trades to push the last price up, then sells to a human who chases the price. Use the controls in the left panel to experiment.")

Helper: run simulation

def run_simulation(fair_price, algo_bid_initial, algo_ask_initial, human_limit_price, chase_pct, ladder_prices): trades = [] orderbook_snapshots = []

# initial orderbook
orderbook = {'bids': [(algo_bid_initial, 1)], 'asks': [(algo_ask_initial, 1)]}
orderbook_snapshots.append((0, dict(orderbook)))

last_price = None
time = 1

# human limit order sits in book
human_order = {'price': human_limit_price, 'qty': 1, 'status': 'open'}

# Algo posts ladder and self-matches (wash trades)
for p in ladder_prices:
    # post ask
    orderbook['asks'].append((p, 1))
    orderbook_snapshots.append((time, dict(orderbook)))
    # match it with algo buy -> wash trade
    trades.append({'time': time, 'price': p, 'side': 'buy', 'actor': 'algo'})
    last_price = p
    # remove ask
    orderbook['asks'] = [a for a in orderbook['asks'] if a[0] != p]
    time += 1

# human chases
human_chase_price = round(fair_price * (1 + chase_pct / 100.0), 2)
orderbook_snapshots.append((time, dict(orderbook)))

# replace algo's big ask (100) with human chase price (simulate algo selling to human)
orderbook['asks'] = [a for a in orderbook['asks'] if a[0] != algo_ask_initial]
orderbook['asks'].append((human_chase_price, 1))
orderbook_snapshots.append((time + 1, dict(orderbook)))

# human market buy matches at chase price
trades.append({'time': time + 1, 'price': human_chase_price, 'side': 'buy', 'actor': 'human'})
last_price = human_chase_price
orderbook['asks'] = [a for a in orderbook['asks'] if a[0] != human_chase_price]
time += 2

# algo resets displayed book
orderbook['bids'] = [(algo_bid_initial, 1)]
orderbook['asks'] = [(algo_ask_initial, 1)]
orderbook_snapshots.append((time, dict(orderbook)))

# Build DataFrame for price series
price_series = [(t['time'], t['price']) for t in trades]
df_prices = pd.DataFrame(price_series, columns=['time', 'price']).set_index('time') if price_series else pd.DataFrame({'price': [fair_price]}, index=[0])
df_trades = pd.DataFrame(trades)

# Human P&L vs fair price
human_entries = df_trades[df_trades['actor'] == 'human']
human_entry_price = human_entries['price'].iloc[-1] if not human_entries.empty else None
human_unrealized_pnl = None
human_pct_loss = None
if human_entry_price is not None:
    human_unrealized_pnl = fair_price - human_entry_price
    human_pct_loss = (human_unrealized_pnl / human_entry_price) * 100

return {
    'df_prices': df_prices,
    'df_trades': df_trades,
    'orderbook_snapshots': orderbook_snapshots,
    'human_entry_price': human_entry_price,
    'human_unrealized_pnl': human_unrealized_pnl,
    'human_pct_loss': human_pct_loss,
}

if run_sim: # parse ladder try: ladder_prices = [float(x.strip()) for x in ladder_text.split(',') if x.strip()] except Exception: st.error("Invalid ladder input. Use comma-separated numeric prices like: 22,26,30") ladder_prices = []

result = run_simulation(fair_price, algo_bid_initial, algo_ask_initial, human_limit_price, chase_pct, ladder_prices)

# show key summary
col1, col2 = st.columns([2, 1])
with col1:
    st.subheader("Price series")
    st.line_chart(result['df_prices']['price'])

with col2:
    st.subheader("Human P&L vs fair price")
    if result['human_entry_price'] is not None:
        st.metric("Human entry price", f"{result['human_entry_price']}")
        st.metric("Fair price", f"{fair_price}")
        st.metric("Unrealized P&L", f"{result['human_unrealized_pnl']:.2f}")
        st.metric("% vs entry", f"{result['human_pct_loss']:.2f}%")
    else:
        st.write("No human trade in this simulation")

# show trade log
if show_trade_log:
    st.subheader("Trade log")
    st.dataframe(result['df_trades'])

# show orderbook snapshots
if show_orderbook:
    st.subheader("Orderbook snapshots (selected)")
    # Show the last few snapshots
    for snap in result['orderbook_snapshots'][-6:]:
        t, ob = snap
        st.write(f"t={t}: bids={ob['bids']}, asks={ob['asks']}")

# Download CSV
csv_buf = StringIO()
result['df_trades'].to_csv(csv_buf, index=False)
csv_bytes = csv_buf.getvalue().encode('utf-8')
st.download_button("Download trade log CSV", data=csv_bytes, file_name="trade_log.csv", mime='text/csv')

# Small explanatory note
st.caption("This simulation is a simplified educational model and does not represent a full exchange or regulatory behavior. Use it to experiment and learn about how price manipulations might look in a thin market.")

else: st.info("Configure simulation parameters in the sidebar and click 'Run simulation' to start.")
